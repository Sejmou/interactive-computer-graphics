(self.webpackChunkbachelor_thesis_code=self.webpackChunkbachelor_thesis_code||[]).push([[929],{929:function(e,t,o){"use strict";var i=this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},n=this&&this.__read||function(e,t){var o="function"==typeof Symbol&&e[Symbol.iterator];if(!o)return e;var i,n,r=o.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=r.next()).done;)s.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}return s},r=this&&this.__spreadArray||function(e,t){for(var o=0,i=t.length,n=e.length;o<i;o++,n++)e[n]=t[o];return e},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BezierDemo=void 0;var a=s(o(35)),h=o(451),c=o(479),l=s(o(399)),u=function(){function e(e,t,o){this.p5=e,this.controlVertices=[],this._t=0,this.basePointDiameter=.015*e.width,this.baseLineWidth=.0025*e.width,this.controlVertexColor=e.color(l.default.primaryColor),this.bezierCurve=new m(e,this),this.deCasteljauVis=new v(e,this),this.controlsForT=new b(e,this,t),this.curveDegreeTextContainer=e.createDiv(),this.curveDegreeTextContainer.parent(o),this.demoGuide=new y(e,this)}return Object.defineProperty(e.prototype,"t",{get:function(){return this._t},set:function(e){this._t=e,this._t>1&&(this._t=0),this.t<0&&(this._t=1),this.controlsForT.updateSlider()},enumerable:!1,configurable:!0}),e.prototype.handleMousePressed=function(){if(0!==this.controlVertices.length)for(var e=this.controlVertices.slice(),t=0;t<e.length;t++){var o=e[t];if(o.handleMousePressed(),o.dragging)break}else this.addVertexAtPos(this.p5.mouseX,this.p5.mouseY).handleMousePressed()},e.prototype.addVertexAtPos=function(e,t){var o=this.createVertexWithPos(e,t);return this.controlVertices=r(r([],n(this.controlVertices)),[o]),this.handleCurveDegreeChange(),o},e.prototype.handleMouseReleased=function(){this.controlVertices.forEach((function(e){return e.handleMouseReleased()}))},e.prototype.handleTouchStarted=function(){if(0!==this.controlVertices.length)for(var e=this.controlVertices.slice(),t=0;t<e.length;t++){var o=e[t];if(o.handleTouchStarted(),o.dragging)break}else{var i=this.p5.touches;0===i.length?console.warn("touches was unexpectedly empty"):this.addVertexAtPos(i[0].x,i[0].y).handleTouchStarted()}},e.prototype.handleTouchReleased=function(){this.controlVertices.forEach((function(e){return e.handleTouchReleased()}))},Object.defineProperty(e.prototype,"hovering",{get:function(){return this.controlVertices.some((function(e){return e.hovering}))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dragging",{get:function(){return this.controlVertices.some((function(e){return e.dragging}))},enumerable:!1,configurable:!0}),e.prototype.draw=function(){this.controlVertices.length>0?(this.controlsForT.updateT(),this.controlVertices.length>1&&this.bezierCurve.draw(),this.controlVertices.length>1&&this.deCasteljauVis.draw(),this.drawControlVertices()):(this.p5.push(),this.p5.textAlign(this.p5.CENTER),this.p5.text("Click or touch anywhere on the canvas to add a vertex",this.p5.width/2,this.p5.height/2),this.p5.pop())},e.prototype.drawControlVertices=function(){this.controlVertices.forEach((function(e){return e.draw()}))},e.prototype.addElementAfter=function(e){var t=this.controlVertices.findIndex((function(t){return t===e}));if(-1!==t){var o=this.p5.touches,i=o.length>0,n=i?o[0].x:this.p5.mouseX,r=i?o[0].y:this.p5.mouseY,s=this.createVertexWithPos(n,r);this.controlVertices.splice(t+1,0,s),i?s.handleTouchStarted():s.handleMousePressed(),this.handleCurveDegreeChange()}else console.warn("could not find provided element in control vertices of bezier, cancelling adding...")},e.prototype.createVertexWithPos=function(e,t){var o=new h.DragVertex(this.p5,this.p5.createVector(e,t));return o.color=this.controlVertexColor,o.activeColor=c.lightenDarkenP5Color(this.p5,this.controlVertexColor,-20),o.baseRadius=this.basePointDiameter/2,o.stroke=!1,o.showLabel=!1,o.editable=!0,o.assign(this),o},e.prototype.remove=function(e){this.controlVertices=this.controlVertices.filter((function(t){return t!==e})),this.handleCurveDegreeChange()},e.prototype.handleCurveDegreeChange=function(){var e=this.controlVertices.length;this.curveDegreeTextContainer.html("Number of control vertices: "+e),this.controlVertices.forEach((function(e,t){return e.label=""+c.indexToLowercaseLetter(t)})),this.deCasteljauVis.onlyDrawPointOnBezier=e<3,this.controlsForT.visible=e>1,this.demoGuide.visible=e>0,this.demoGuide.update()},e}();t.BezierDemo=u;var p,d,f,w,g,m=function(){function e(e,t){var o=this;this.p5=e,this.demo=t,this.evaluationSteps=100,this.zeroToOne=r([],n(Array(this.evaluationSteps+1).keys())).map((function(e){return e/o.evaluationSteps})),this.color=e.color(30)}return e.prototype.draw=function(){var e=this;if(0!==this.demo.controlVertices.length&&1!==this.demo.controlVertices.length){var t=this.zeroToOne.map((function(t){return e.findPointOnCurveWithDeCasteljau(e.demo.controlVertices.map((function(e){return e.position})),t)}));t.forEach((function(o,i){i!==t.length-1&&c.drawLine(e.p5,o,t[i+1],e.color,2*e.demo.baseLineWidth)}))}},e.prototype.findPointOnCurveWithDeCasteljau=function(e,t){if(1===e.length)return e[0];var o=[];return e.forEach((function(i,n){if(n!==e.length-1){var r=a.default.Vector.lerp(i,e[n+1],t);o.push(r)}})),this.findPointOnCurveWithDeCasteljau(o,t)},e}(),v=function(){function e(e,t){this.p5=e,this.bezierCurve=t,this.onlyDrawPointOnBezier=!1,this.color=e.color("#E1B000"),this.colorOfPointOnBezier=e.color(l.default.errorColor)}return e.prototype.draw=function(){this.recursiveDraw(this.bezierCurve.controlVertices.map((function(e){return e.position})))},e.prototype.recursiveDraw=function(e){var t=this;if(0!==e.length)if(1!==e.length){var o=[];e.forEach((function(i,n){if(n!==e.length-1){var r=a.default.Vector.lerp(i,e[n+1],t.bezierCurve.t);t.onlyDrawPointOnBezier||(c.drawLine(t.p5,i,e[n+1],t.color,t.bezierCurve.baseLineWidth),c.drawCircle(t.p5,r,t.color,t.bezierCurve.basePointDiameter)),o.push(r)}})),this.recursiveDraw(o)}else c.drawCircle(this.p5,e[0],this.colorOfPointOnBezier,1.5*this.bezierCurve.basePointDiameter)},e}(),b=function(){function e(t,o,i){var n=this;this.demo=o,this.currAnimationSpeedMultiplierIndex=e.animationSpeedMultipliers.findIndex((function(e){return 1===e})),this._animationRunning=!1,this.controlsContainer=t.createDiv(),this.controlsContainer.parent(i),this.controlsContainer.class("flex-row center-cross-axis disable-dbl-tap-zoom prevent-text-select"),this.sliderLabel=t.createSpan("t: "+this.demo.t.toFixed(2)),this.sliderLabel.parent(this.controlsContainer),this.slider=t.createSlider(0,1,0,.00125),this.slider.parent(this.controlsContainer),this.slider.style("flex-grow","2"),this.slider.mousePressed((function(){return n.animationRunning=!1})),this.slowerButton=t.createButton('<span class="material-icons">fast_rewind</span>'),this.slowerButton.parent(this.controlsContainer),this.slowerButton.mouseClicked((function(){return n.rewindClicked()})),this.playPauseButton=t.createButton('<span class="material-icons">play_arrow</span>'),this.playPauseButton.parent(this.controlsContainer),this.playPauseButton.mouseClicked((function(){return n.animationRunning=!n.animationRunning})),this.visible=!1,this.fasterButton=t.createButton('<span class="material-icons">fast_forward</span>'),this.fasterButton.parent(this.controlsContainer),this.fasterButton.mouseClicked((function(){return n.fastForwardClicked()}))}return Object.defineProperty(e.prototype,"visible",{set:function(e){this.controlsContainer.style("visibility",e?"visible":"hidden")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"animationRunning",{get:function(){return this._animationRunning},set:function(e){this._animationRunning=e,this._animationRunning?this.playPauseButton.html('<span class="material-icons">pause</span>'):this.playPauseButton.html('<span class="material-icons">play_arrow</span>')},enumerable:!1,configurable:!0}),e.prototype.updateT=function(){this.animationRunning?this.demo.t+=.005*e.animationSpeedMultipliers[this.currAnimationSpeedMultiplierIndex]:this.demo.t=+this.slider.value()},e.prototype.updateSlider=function(){this.sliderLabel.html("t: "+this.demo.t.toFixed(2)),this.slider.value(this.demo.t)},e.prototype.fastForwardClicked=function(){this.animationRunning=!0,this.currAnimationSpeedMultiplierIndex<e.animationSpeedMultipliers.length-1&&this.currAnimationSpeedMultiplierIndex++},e.prototype.rewindClicked=function(){this.animationRunning=!0,this.currAnimationSpeedMultiplierIndex>0&&this.currAnimationSpeedMultiplierIndex--},e.animationSpeedMultipliers=[-4,-2,-1.5,-1,-.5,-.25,-.125,.125,.25,.5,1,1.5,2,4],e}(),y=function(){function e(e,t){this.demo=t,this.textBox=e.select("#demo-guide"),this.visible=!1}return Object.defineProperty(e.prototype,"visible",{set:function(e){this.textBox.style("display",e?"block":"none")},enumerable:!1,configurable:!0}),e.prototype.update=function(){this.textBox.html(this.createParagraphsHTMLFromMessage(this.getMessage())),MathJax.typeset(["#demo-guide"])},e.prototype.createParagraphsHTMLFromMessage=function(e){return e.split("\n\n").map((function(e){return"<p>"+e.trim().replace("\n","<br>")+"</p>"})).join("")},e.prototype.getMessage=function(){switch(this.demo.controlVertices.length){case 0:return"";case 1:return String.raw(p||(p=i(["A single point on its own is quite boring, right?\n                Add another one by clicking/tapping the '+'-icon of the point!"],["A single point on its own is quite boring, right?\n                Add another one by clicking/tapping the '+'-icon of the point!"])));case 2:return String.raw(d||(d=i(["Great, now we have two points, yay! We can connect them with a line. But how could that work? ðŸ¤”\n\n                One way is to \"mix\" the positions of the two points using linear interpolation with a parameter, let's call it ( t ).\n                ( t ) ranges from 0 to 1. The bigger ( t ), the more we move from the first point to the second.\n                So, if ( t = 0 ) we are at the first point, if ( t = 0.5 ) we are right between the first and second point, and at ( t = 1 ) we reach the second point.\n\n                Feel free to experiment with the controls for ( t ) below, if you're ready add another point, we will then get to know the actual BÃ©zier curves :)"],["Great, now we have two points, yay! We can connect them with a line. But how could that work? ðŸ¤”\n\n                One way is to \"mix\" the positions of the two points using linear interpolation with a parameter, let's call it \\( t \\).\n                \\( t \\) ranges from 0 to 1. The bigger \\( t \\), the more we move from the first point to the second.\n                So, if \\( t = 0 \\) we are at the first point, if \\( t = 0.5 \\) we are right between the first and second point, and at \\( t = 1 \\) we reach the second point.\n\n                Feel free to experiment with the controls for \\( t \\) below, if you're ready add another point, we will then get to know the actual BÃ©zier curves :)"])));case 3:return String.raw(f||(f=i(['What you are seeing now, is a quadratic bÃ©zier curve. Notice that by moving the points you added, you can change the shape of this nice, smooth curve.\n                Because those points can be used to "control" the bÃ©zier curve, they are called the "control points" of the bÃ©zier curve.\n\n                The weird looking yellow lines and dots between the control points that move as ( t ) changes are a visualization of the so-called "De Casteljau algorithm".\n                The algorithm is used for drawing bÃ©zier curves. It works like this: we interpolate between each of the adjacent control points with the parameter ( t ), just like we did when we only had two points.\n                The interpolations produce two new points on the lines between the control points. By interpolating between those two points again, we get another, single point: the position of the point on the bÃ©zier curve!'],['What you are seeing now, is a quadratic bÃ©zier curve. Notice that by moving the points you added, you can change the shape of this nice, smooth curve.\n                Because those points can be used to "control" the bÃ©zier curve, they are called the "control points" of the bÃ©zier curve.\n\n                The weird looking yellow lines and dots between the control points that move as \\( t \\) changes are a visualization of the so-called "De Casteljau algorithm".\n                The algorithm is used for drawing bÃ©zier curves. It works like this: we interpolate between each of the adjacent control points with the parameter \\( t \\), just like we did when we only had two points.\n                The interpolations produce two new points on the lines between the control points. By interpolating between those two points again, we get another, single point: the position of the point on the bÃ©zier curve!'])));case 4:return String.raw(w||(w=i(["You were brave and added another point? Congratulations, you have created a cubic bÃ©zier curve! Now you have even more control over the shape of the curve.\n                Feel free to add as many additional control points as you wish, it just works!\n                "],["You were brave and added another point? Congratulations, you have created a cubic bÃ©zier curve! Now you have even more control over the shape of the curve.\n                Feel free to add as many additional control points as you wish, it just works!\n                "])));default:return String.raw(g||(g=i(['As you can see, the De Casteljau algorithm works with arbitrary numbers of control points.\n                Notice, however, that it is quite difficult to make changes to the shape of the curve, if we have lots of points.\n                Each control point has "global control" on the shape of the curve - that means, if we add a single point, it may impact the whole curve shape significantly.\n                \n                Also, the computation of bezier curves of higher degrees quickly becomes VERY computationally expensive as the number of control points increases.\n                Luckily, there is a solution for those problems of bÃ©zier curves: b-spline curves!'],['As you can see, the De Casteljau algorithm works with arbitrary numbers of control points.\n                Notice, however, that it is quite difficult to make changes to the shape of the curve, if we have lots of points.\n                Each control point has "global control" on the shape of the curve - that means, if we add a single point, it may impact the whole curve shape significantly.\n                \n                Also, the computation of bezier curves of higher degrees quickly becomes VERY computationally expensive as the number of control points increases.\n                Luckily, there is a solution for those problems of bÃ©zier curves: b-spline curves!'])))}},e}()}}]);